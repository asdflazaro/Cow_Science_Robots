# -*- coding: utf-8 -*-
"""EC.Ch.NCh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13dxxM5BuuNzj0ZTGVhwp9s7PuNj9dyEB
"""

import pandas as pd
import sklearn.ensemble
import sklearn.metrics
import sklearn.model_selection
from sklearn.model_selection import train_test_split

dados = pd.read_csv('TabelaC.P.D.csv', delimiter = ';')

dados.head()

dados.dtypes

dados.shape

variaveis = ['ax','ay','az','gx','gy', 'gz ']

x = dados[variaveis]
y = dados['Comportamento']

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, shuffle=True, random_state=0)

y_train.value_counts(normalize=True)*100

y_test.value_counts(normalize=True)*100

from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline

from sklearn.ensemble import RandomForestClassifier
rf_model = Pipeline([('Scaler', MinMaxScaler()), ('model', RandomForestClassifier(random_state=0, n_jobs=-1))])
rf_scores = cross_val_score(rf_model, X_train, y_train,
                            scoring="accuracy", cv=10, n_jobs=-1)

from numpy.core.fromnumeric import mean
print(mean(rf_scores))

# Houldout
preds = rf_model.fit(X_train, y_train).predict(X_test)
probas = rf_model.predict_proba(X_test)

from sklearn.metrics import classification_report, accuracy_score, cohen_kappa_score

print(classification_report(y_test, preds))
print('Accuracy: ', accuracy_score(y_test, preds)*100)
print("Cohen's K: ", cohen_kappa_score(y_test, preds))